#!/usr/bin/env python
import sys
import squid
import numpy as np
import argparse

parser = argparse.ArgumentParser(description='Convert fq to multifasta contigs.')

parser.add_argument('-c', '--cutoff', dest='cutoff', type=int,
                    help='quality cutoff')

parser.add_argument('-w', '--window', dest='window', type=int, default=5,
                    help='window size for the moving average')

parser.add_argument('-m', '--min', dest='min', type=int, default=5,
                    help='min contig size to output')

parser.add_argument('fq', metavar='FQ_FILE', type=str, nargs=1,
                   help='fq input file')

args = parser.parse_args()

def smooth(x, window_len=11):
    if x.ndim != 1:
        raise ValueError, "smooth only accepts 1 dimension arrays."

    if x.size < window_len:
        raise ValueError, "Input vector needs to be bigger than window size."

    if window_len<3:
        return x
    s=np.r_[x[window_len-1:0:-1],x,x[-1:-window_len:-1]]
    w=np.ones(window_len,'d')
    y=np.convolve(w/w.sum(),s,mode='valid')
    return y

for sid, seq, qua in squid.fqReader(args.fq[0], format="sanger"):
    print sid
    squ = smooth(qua, args.window)
    low = np.where(squ < args.cutoff)[0]
    last = 0
    for i in low[:20]:
        # this index below cutoff
        # see where the last index was & calculate the size of 
        # the last proper contig
        cons = i-last
        if cons < args.min: 
            last = i
            continue
        print last, i, i-last
        last = i

        
    #now find breakpoints - which is anythin below cutoff
    
